plugins {
    id "dev.architectury.loom" version "1.6-SNAPSHOT"
}

def loader = property("loom.platform")
def isFabric = loader == "fabric"
def mcVersion = property("deps.minecraft")

version = property("mod.version")
group = "dev.imb11"

base {
    archivesName = property("mod.name") + "-" + loader
}

stonecutter {
    def platform = project.property("loom.platform")
    stonecutter.const("fabric", platform == "fabric")
    stonecutter.const("forge", platform == "forge")
    stonecutter.const("neoforge", platform == "neoforge")
}

loom {
    // TODO: Add a better multi-version AW strategy: https://github.com/IMB11/Sounds/blob/main/build.gradle#L86
    accessWidenerPath = getRootProject().file('src/main/resources/fog.accesswidener')

    if (loader == "forge") {
        forge {
            convertAccessWideners.set(true)
            mixinConfigs(
                    "fog.mixins.json",
            )
        }
    }

    runConfigs.all {
        ideConfigGenerated = true
        runDir "../../run"
    }
}
repositories {
    maven { url "https://maven.neoforged.net/releases/" }
    mavenCentral()
    mavenLocal()
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url 'https://maven.wispforest.io' }
    maven { url 'https://maven.imb11.dev/releases' }
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://maven.quiltmc.org/repository/release" }
    maven { url 'https://maven.terraformersmc.com/releases' }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${property("deps.minecraft")}"
    mappings "net.fabricmc:yarn:${property("deps.yarn")}:v2"

    modImplementation(include("dev.architectury:architectury-${loader}:${property("deps.arch_api")}"))
    modImplementation(include("dev.isxander:yet-another-config-lib:${property("deps.yacl")}-${loader}"))

    if (isFabric) {
        System.out.println(loader)
        modImplementation("net.fabricmc:fabric-loader:${property("deps.fabric_loader")}")

        modLocalRuntime("net.fabricmc.fabric-api:fabric-api:${property("runtime.fabric_api")}")
        modImplementation("maven.modrinth:modmenu:${property("deps.mod_menu")}")
    } else {
        if (loader == "forge") {
            "forge"("net.minecraftforge:forge:${mcVersion}-${property("deps.fml")}")
            compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.0"))
            implementation(include("io.github.llamalad7:mixinextras-forge:0.4.0"))
        } else {
            // TODO: NEOFORGE
        }
    }
}

processResources {
    if (loader == "fabric") {
        filesMatching('fabric.mod.json') {
            expand 'mod_version': version,
                    'target_minecraft': project.property('mod.target')
        }
    } else if (loader == "forge") {
        filesMatching('META-INF/mods.toml') {
            expand 'mod_version': version,
                    'target_minecraft': project.property("mod.target"),
                    'target_forge': project.property("fml.target")
        }
    }
}

java {
    var version = stonecutter.eval(stonecutter.current.version, ">1.20.4") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17

    sourceCompatibility = version
    targetCompatibility = version
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}
